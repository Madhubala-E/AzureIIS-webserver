tosca_definitions_version: cloudify_dsl_1_3

description: >
  This blueprint describes a simple Windows OS configuration with IIS installation in the Azure Cloud environment that deploys one Virtual Machine. 

imports:
  - http://www.getcloudify.org/spec/cloudify/3.4/types.yaml
  - https://raw.githubusercontent.com/cloudify-cosmo/cloudify-azure-plugin/master/plugin.yaml

inputs:
  resource_prefix:
    default: madhu
  resource_suffix:
    default: 1
  
  # Azure account information
  subscription_id:
    type: string
    default: aaadbdce-b752-461b-892f-0b6d519feacb 
    required: true
  tenant_id:
    type: string
    default: 2ce2daff-4e86-4a36-a7e3-6aa2a22bf4d1
    required: true
  client_id:
    type: string
    default: c780f375-986c-4769-973f-cc0c42a79006
    required: true
  client_secret:
    type: string
    default: vVUqmiOTjZe69e2d8+St3qr0+g6Gux4FWc58yr9qzCI=
    required: true
  location:
    type: string
    required: true
    default: southindia
  retry_after:
    type: integer
    default: 45

  # Networking
  subnet_private_cidr:
    type: string
    required: true
    default: 10.10.0.0/16

  # Virtual Machine information
  vm_size: 
    type: string
    required: true
    default: Standard_A2
  vm_os_family:
    type: string
    required: true
    default: windows
  vm_image_publisher: 
    type: string
    required: true
    default: MicrosoftWindowsServer
  vm_image_offer: 
    type: string
    required: true
    default: WindowsServer
  vm_image_sku:
    type: string
    required: true
    default: 2012-R2-Datacenter
  vm_image_version:
    type: string
    required: true
    default: latest
  vm_os_username:
    description: >
      Username to create as the VM's administrator user
    type: string
    required: true
    default: gavsadmin
  vm_os_password:
    description: >
      Password to use for the VM's administrator user
    type: string
    required: true
    default: gavs_123       

 # Application information
  webserver_port:
    description: The internal Microsoft IIS web server port
    default: 8080

  loadbalancer_port:
    description: The external Azure Load Balancer port
    default: 80  

  webserver_ps1_url:
    default: D:\madhubala\blueprint files\windows-iis-webapp.ps1.zip

dsl_definitions:
  azure_config: &azure_config
    subscription_id: { get_input: subscription_id }
    tenant_id: { get_input: tenant_id }
    client_id: { get_input: client_id }
    client_secret: { get_input: client_secret }
 
node_templates:

  #################
  # New resources #
  #################

  resource_group:
    type: cloudify.azure.nodes.ResourceGroup
    properties:
      name: {concat:[{get_input: resource_prefix},rg,{get_input: resource_suffix}]}
      location: { get_input: location }
      azure_config: *azure_config
      
  storage_account:
    type: cloudify.azure.nodes.storage.StorageAccount
    properties:
      name: {concat:[{get_input: resource_prefix},stracc,{get_input: resource_suffix}]}
      location: { get_input: location }
      azure_config: *azure_config
      retry_after: { get_input: retry_after }
      resource_config:
        accountType: Standard_LRS
    relationships:
    - type: cloudify.azure.relationships.contained_in_resource_group
      target: resource_group
  
  virtual_network:
    type: cloudify.azure.nodes.network.VirtualNetwork
    properties:
      name: {concat:[{get_input: resource_prefix},virtual_network,{get_input: resource_suffix}]}
      location: { get_input: location }
      azure_config: *azure_config
      retry_after: { get_input: retry_after }
    relationships:
    - type: cloudify.azure.relationships.contained_in_resource_group
      target: resource_group

  subnet:
    type: cloudify.azure.nodes.network.Subnet
    properties:
      name: {concat:[{get_input: resource_prefix},subnet,{get_input: resource_suffix}]}
      location: { get_input: location }
      azure_config: *azure_config
      retry_after: { get_input: retry_after }
      resource_config:
        addressPrefix: { get_input: subnet_private_cidr }
    relationships:
    - type: cloudify.azure.relationships.contained_in_virtual_network
      target: virtual_network
 
  network_security_group:
    type: cloudify.azure.nodes.network.NetworkSecurityGroup
    properties:
      location: { get_input: location }
      retry_after: { get_input: retry_after }
      resource_config:
        securityRules:
        - name: nsr_rdp
          properties:
            description: RDP access
            protocol: Tcp
            sourcePortRange: '*'
            destinationPortRange: 3389
            sourceAddressPrefix: '*'
            destinationAddressPrefix: '*'
            priority: 100
            access: Allow
            direction: Inbound
        - name: nsr_winrm
          properties:
            description: WinRM access
            protocol: Tcp
            sourcePortRange: '*'
            destinationPortRange: 5985-5986
            sourceAddressPrefix: '*'
            destinationAddressPrefix: '*'
            priority: 200
            access: Allow
            direction: Inbound
        - name: nsr_webapp
          properties:
            description: Webapp access
            protocol: Tcp
            sourcePortRange: '*'
            destinationPortRange: { get_input: webserver_port }
            sourceAddressPrefix: '*'
            destinationAddressPrefix: '*'
            priority: 300
            access: Allow
            direction: Inbound
      azure_config: *azure_config
    relationships:
    - type: cloudify.azure.relationships.contained_in_resource_group
      target: resource_group

   
  vm:
    type: cloudify.azure.nodes.compute.VirtualMachine
    properties:
      name: {concat:[{get_input: resource_prefix},virtual_machine,{get_input: resource_suffix}]} 
      location: { get_input: location }
      retry_after: { get_input: retry_after }
      os_family: { get_input: vm_os_family }
      resource_config:
        hardwareProfile:
          vmSize: { get_input: vm_size }
        storageProfile:
          imageReference:
            publisher: { get_input: vm_image_publisher }
            offer: { get_input: vm_image_offer }
            sku: { get_input: vm_image_sku }
            version: { get_input: vm_image_version }
        osProfile:
          computerName: { concat:[{get_input: resource_prefix},vm,{get_input: resource_suffix}] } 
          adminUsername: { get_input: vm_os_username }
          adminPassword: { get_input: vm_os_password }
      agent_config:
        user: { get_input: vm_os_username }
        password: { get_input: vm_os_password }
        install_method: none
      azure_config: *azure_config
    relationships:
    - type: cloudify.azure.relationships.contained_in_resource_group
      target: resource_group
    - type: cloudify.azure.relationships.connected_to_storage_account
      target: storage_account
    - type: cloudify.azure.relationships.connected_to_nic
      target: vm_nic

  availability_set:
    type: cloudify.azure.nodes.compute.AvailabilitySet
    properties:
      location: { get_input: location }
      retry_after: { get_input: retry_after }
      azure_config: *azure_config
    relationships:
    - type: cloudify.azure.relationships.contained_in_resource_group
      target: resource_group    
     
  vm_nic_ip_cfg:
    type: cloudify.azure.nodes.network.IPConfiguration
    properties:
      name: {concat:[{get_input: resource_prefix},vm_nic_ip_cfg,{get_input: resource_suffix}]} 
      location: { get_input: location }
      retry_after: { get_input: retry_after }
      resource_config:
        privateIPAllocationMethod: Dynamic
      azure_config: *azure_config
    relationships:
    - type: cloudify.azure.relationships.contained_in_resource_group
      target: resource_group
    - type: cloudify.azure.relationships.ip_configuration_connected_to_subnet
      target: subnet
    - type: cloudify.azure.relationships.ip_configuration_connected_to_public_ip
      target: vm_public_ip
   
  vm_nic:
    type: cloudify.azure.nodes.network.NetworkInterfaceCard
    properties:
      name: {concat:[{get_input: resource_prefix},vm_nic,{get_input: resource_suffix}]}
      location: { get_input: location }
      retry_after: { get_input: retry_after }
      azure_config: *azure_config
    relationships:
    - type: cloudify.azure.relationships.contained_in_resource_group
      target: resource_group
    - type: cloudify.azure.relationships.nic_connected_to_network_security_group
      target: network_security_group
    - type: cloudify.azure.relationships.nic_connected_to_ip_configuration
      target: vm_nic_ip_cfg

  vm_public_ip:
    type: cloudify.azure.nodes.network.PublicIPAddress
    properties:
      name: {concat:[{get_input: resource_prefix},vm_public_ip,{get_input: resource_suffix}]}
      location: { get_input: location }
      retry_after: { get_input: retry_after }
      resource_config:
        publicIPAllocationMethod: Static
      azure_config: *azure_config
    relationships:
    - type: cloudify.azure.relationships.contained_in_resource_group
      target: resource_group
  
  vm_webserver:
    type: cloudify.azure.nodes.compute.VirtualMachineExtension
    properties:
      name: vm_webserver
      location: { get_input: location }
      retry_after: { get_input: retry_after }
      azure_config: *azure_config
    interfaces:
      cloudify.interfaces.lifecycle:
        create:
          inputs:
            resource_config:
              publisher: Microsoft.Powershell
              type: DSC
              typeHandlerVersion: '2.19'
              settings:
               ModulesUrl: { get_input: webserver_ps1_url }
               ConfigurationFunction: windows-iis-webapp.ps1
               Properties:
                MachineName: { get_property: [vm, name] }
                WebServerPort: { get_input: webserver_port }
    relationships:
    - type: cloudify.azure.relationships.vmx_contained_in_vm
      target: vm    

  vm_webapp:
    type: cloudify.nodes.ApplicationModule
    interfaces:
      cloudify.interfaces.lifecycle:
        start: scripts/configure.py
    relationships:
    - type: cloudify.relationships.contained_in
      target: vm_webserver          

  lb_public_ip:
    type: cloudify.azure.nodes.network.PublicIPAddress
    properties:
      location: { get_input: location }
      retry_after: { get_input: retry_after }
      resource_config:
        publicIPAllocationMethod: Static
      azure_config: *azure_config
    relationships:
    - type: cloudify.azure.relationships.contained_in_resource_group
      target: resource_group
      
  lb_ip_cfg:
    type: cloudify.azure.nodes.network.IPConfiguration
    properties:
      location: { get_input: location }
      retry_after: { get_input: retry_after }
      resource_config:
        privateIPAllocationMethod: Dynamic
      azure_config: *azure_config
    relationships:
    - type: cloudify.azure.relationships.ip_configuration_connected_to_public_ip
      target: lb_public_ip
      
  load_balancer:
    type: cloudify.azure.nodes.network.LoadBalancer
    properties:
      location: { get_input: location }
      retry_after: { get_input: retry_after }
      azure_config: *azure_config
    relationships:
    - type: cloudify.azure.relationships.contained_in_resource_group
      target: resource_group
    - type: cloudify.azure.relationships.lb_connected_to_ip_configuration
      target: lb_ip_cfg
      
  load_balancer_backend_pool:
    type: cloudify.azure.nodes.network.LoadBalancer.BackendAddressPool
    properties:
      location: { get_input: location }
      retry_after: { get_input: retry_after }
      azure_config: *azure_config
    relationships:
    - type: cloudify.azure.relationships.contained_in_load_balancer
      target: load_balancer
      
  load_balancer_probe:
    type: cloudify.azure.nodes.network.LoadBalancer.Probe
    properties:
      location: { get_input: location }
      retry_after: { get_input: retry_after }
      resource_config:
        protocol: Http
        port: { get_input: webserver_port }
        requestPath: index.html
      azure_config: *azure_config
    relationships:
    - type: cloudify.azure.relationships.contained_in_load_balancer
      target: load_balancer
    # Ensure serial operations
    - type: cloudify.relationships.depends_on
      target: load_balancer_backend_pool
      
  load_balancer_rule:
    type: cloudify.azure.nodes.network.LoadBalancer.Rule
    properties:
      location: { get_input: location }
      retry_after: { get_input: retry_after }
      resource_config:
        protocol: Tcp
        backendPort: { get_input: webserver_port }
        frontendPort: { get_input: loadbalancer_port }
      azure_config: *azure_config
    relationships:
    - type: cloudify.azure.relationships.contained_in_load_balancer
      target: load_balancer
    - type: cloudify.azure.relationships.connected_to_ip_configuration
      target: lb_ip_cfg
    - type: cloudify.azure.relationships.connected_to_lb_be_pool
      target: load_balancer_backend_pool
    - type: cloudify.azure.relationships.connected_to_lb_probe
      target: load_balancer_probe

groups:
  frontend:
    members:
    - vm
    - vm_nic
    - vm_nic_ip_cfg
    - vm_webserver
    - vm_webapp
    
policies:
  scale_policy1:
    type: cloudify.policies.scaling
    properties:
      default_instances: 1
    targets: [frontend]

outputs:
  webapp_ip:
    value: { get_attribute: [ load_balancer, public_ip ] }
  webapp_port:
    value: { get_input: loadbalancer_port }
  webapp_endpoint:
    value: { concat: [ 'http://', { get_attribute: [ load_balancer, public_ip ] }, ':',  { get_input: loadbalancer_port } ] }_nic
    - vm_nic_ip_cfg
    - vm_webserver
    - vm_webapp
    

